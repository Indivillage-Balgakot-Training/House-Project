Documentation of each page when its connects to the backend and APIs 

1. GET and POST request 
GALLERY PAGE

  // Fetch houses from the backend when the component mounts
  useEffect(() => {
    const fetchHouses = async () => {
      try {
        const response = await fetch('http://127.0.0.1:5000/houses');  // we have Fetch houses data from this backend API
        if (!response.ok) {
          throw new Error('Network response was not ok'); // this will Handle network errors
        }
        const data: House[] = await response.json(); // Parse the JSON response into House objects
        setHouses(data);  // Set the fetched houses to state
        if (data.length > 0) {
          setSelectedHouse(data[0]); // Set the first house as selected
        }
      } catch (error: unknown) {
        if (error instanceof Error) {
          setError('Error fetching houses: ' + error.message); // Handle error and update state
        }
      } finally {
        setLoading(false); // Stop loading state once the fetch is complete
      }
    };

    fetchHouses();  // Call the fetchHouses function to get data
  }, []);

POST 

 // Function to handle image click event and lock house selection
  const handleImageClick = async () => {
    if (selectedHouse) {
      if (lockedHouses[selectedHouse.house_id]) {
        setError('This house is currently locked by another user.'); // If house is locked, show error message
        return;
      }
      try {
        setLoading(true); // it used to Set loading state to true while processing the request
     // Make a POST request to select the house
        const response = await fetch('http://127.0.0.1:5000/select-house', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            house_id: selectedHouse.house_id, // Send the selected house's ID in the request body
          }),
        });

        const data = await response.json(); // Parse the response as JSON
        if (!response.ok) {
          throw new Error(data.error || 'Failed to select house'); // Throw error if the selection fails
        }
        }

        const { session_id, house_id } = data; // Destructure session ID and house ID from response data
        setLockedHouses(prev => ({ ...prev, [house_id]: true })); // Lock the house to prevent re-selection

       // Navigate to the layout page with query parameters for house and session IDs
        router.push(`/layout?house_id=${house_id}&house_name=${selectedHouse.house_name}&session_id=${session_id}`);
      } catch (error) {
        setError('Failed to select house'); // Handle errors during house selection
      } finally {
        setLoading(false); // Stop loading state once the operation is complete
      }
    }
  

  LAYOUT PAGE

  useEffect(() => { // This is a React useEffect hook. It runs the code inside the function
    if (!houseId || !sessionId) {
      console.error("Missing house_id, or session_id");
      return;
    }

    const fetchLayoutData = async () => {
      try {
        // Fetch layout data for the selected house
        const layoutResponse = await fetch(`http://localhost:5000/rooms/${houseId}`);
        if (!layoutResponse.ok) {
          throw new Error(`Failed to fetch layout data: ${layoutResponse.statusText}`);
        }
        const data: LayoutData = await layoutResponse.json();
        setLayoutData(data);

        // Set rooms data for the selected house
        const roomNames = data.rooms.map(room => room.name);
        setRooms(roomNames);

        setSelectedHouseId(houseId); // Set selected house ID
      } catch (error) {
        console.error('Error fetching layout data:', error);
        setError('Failed to load layout data');
      }
    };

    fetchLayoutData();
  }, [houseId, sessionId]);


  ROOMS PAGE
  
  useEffect(() => {
    if (!houseId || !sessionId || !roomName) return;
    async function fetchRoomData() {
      try {
        const response = await fetch(
          `http://localhost:5000/room-data_dev?house_id=${houseId}&session_id=${sessionId}&room_name=${roomName}`
        );
        const data = await response.json();
        setRoomData(data);
      } catch (error) {
        console.error('Error fetching room data:', error);
      }
    }

    fetchRoomData();
  }, [houseId, sessionId, roomName]);


  POST Request

  try {
        const response = await fetch('http://localhost:5000/select-room', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(preferences),
        });

        const result = await response.json();

        if (response.ok) {
          console.log('Room preferences updated:', result.message);
        } else {
          console.error('Error:', result.error);
        }
      } catch (error) {
        console.error('Error sending preferences:', error);
      }
 


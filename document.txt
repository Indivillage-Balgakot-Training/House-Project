Title: Home Buying Platform

Description: A  web application for users to browse the house . The platform allows users to search for houses, view property,
          to look into the rooms and available colours of the room. The project leverages Next.js for the frontend and Flask for the backend, 
           creating a seamless user experience and a powerful backend infrastructure. MongoDB is used as database to store the data.

Technologies Used:
Frontend: Next.js, Tailwind CSS

Set up the Frontend (Next.js):
Install dependencies
Start the development server

Frontend (Next.js):
Home Page : Reference for site
Gallery Page: Displays available houses.
Layout Page: It displays the the layout of houses with hoverable rooms.
Rooms Page: It displays the room specification and allow user to make selections.


-----Diagram-----

[Frontend - Next.js]  <---> [Backend - Flask] <---> [Database - MongoDB]


----HOME PAGE----

Home Page is when the user first visits the site. 

This page includes a background image, a logo, button, and social media icons.

When we click on View gallery in home page it will navigate to GALLERY Page.

----GALLERY PAGE----

Expected Parameters: session_id 

When the page loads it sends a GET request to the backend using const response = await fetch('http://127.0.0.1:5000/houses'); 
when it makes request to fetch the a list of available houses.

It will display House Details Once a house is selected, and shows along with name, image, and description.

The sidebar shows a list of houses, and when a house is selected, the page updates to show the selected house's details.

Clicking on the house image navigates users to a layout page where they can view the layout of the selected house,
     router.push(`/layout?house_id=${houseId}`);.

If loading spinner is shown to indicate that the page is fetching data, While waiting for the house data to be fetched.

If there is an error in fetching the house data, an error message is shown to the user.

"Back to Home"  button allows the user to navigate back to the home page.

Purpose:
  Shows a list of available houses with their images, names, and descriptions.
  Allows users to select a house by clicking on its image.
  Prevents other users from selecting a house that is already locked by someone else.
  After selecting a house, users are redirected to a detailed page for further interaction.

Response:
[
              {
      "house_id": "house-001",
      "house_name": "House 1",
      "house_image": "/house1.jpg",
      "description": "A beautiful two-story house located in the heart of the city. Features modern amenities and spacious interiors.",
    }
...
]  


----LAYOUT PAGE----

excepted parameters on house_id and session_id.

LayoutPage allows users to view the layout of rooms in a house.

When the page loads it sends a GET request to the backend using const layoutResponse = await fetch(`http://localhost:5000/rooms/${house_id}`); 
when it makes request asking for the layout information along with the house_id for the house.

The request is successful, it saves the layout data and the list of rooms into the state.

It displays an image showing the house's layout, and also they are clickable areas having different rooms.

Users can hover over these areas to highlight them and click to select a room.

We have functions called handleMouseEnter(when we hover the area,the color will change), handleMouseLeave(when we remove hover it will stop highlight effect),
handleClick(when we click on rooms area it will navigate to the rooms page).

When a room is selected, the user goes to a new page, 
router.push(`/rooms?house_id=${house_id}&session_id=${sessionId}&room_name=${room}`);.

When the user hovers over a room's area, the area changes color to provide a visual hint, making it clear which area is being hovered.

If there is an issue fetching the layout data, an error message is displayed to the user.

Purpose:
To show how house layout looks.
Allow users to select and navigate between different rooms within the house.
Display room details based on user selection.

Response:
{
  "house_id": "house-002",
  "rooms": [
    {
      "areas": [
        {
          "color": "blue",
          "height": 120,
          "left": 215,
          "name": "Bedroom",
          "top": 100,
          "width": 198
        }
      ],
      "image_path": "/images/Bed Room.jpg",
      "name": "Bedroom"
    },
    {
      "areas": [
        {
          "color": "green",
          "height": 197,
          "left": 218,
          "name": "Kitchen",
          "top": 220,
          "width": 195
        }
      ],
      "image_path": "/images/Kitchen img.jpg",
      "name": "Kitchen"
    },
    {
      "areas": [
        {
          "color": "red",
          "height": 315,
          "left": 413,
          "name": "Living Room",
          "top": 100,
          "width": 200
        }
      ],
      "image_path": "/images/LivingRoom.jpg",
      "name": "Living Room"
    }
  ],
  "rooms_image": "/images/layout.jpg"
}


----ROOMS PAGE----

excepted parameters on house_id and session_id and roomName.

It allows users to select room color preferences for a specific room in a house.

This page fetches room data based on query parameters, and displays various options (like colors).

When the page loads it sends a GET request to the backend using (
          `http://localhost:5000/room-data_dev?house_id=${houseId}&session_id=${sessionId}&room_name=${roomName}`
        ) when it makes request asking for the rooms information for the house.

The request is successful, it saves the Room information into the roomData state, selectedImages state stores the selected images per category, 
and it updates dynamically when the user makes selections.        

Users can interact with the page to select different colors for various categories of the room, and these preferences are sent to the backend.

Selected Preferences can also diselected and can select new preferences.

The page sends a POST request with the updated preferences for the room.
const response = await fetch('http://localhost:5000/select-room');

As the user selects different colors, the corresponding images for the selected options are displayed on top of the room image.

"Back to Home" buttons navigates to gallery page, so that users can see other houses.

If the room data is not successfully fetched, an error message is displayed to the user.

Purpose:
  RoomPage allows users to view and customize a specific room within a house. The user can select different color options for categories 
  in the room, means wall color, wardrobe color etc, and these preferences are sent to backend.
  
Response:
  {
  "images": [
    {
      "color_categories": [
        {
          "colors": [
            {
              "color": "#afdc8b",
              "image": "/images/H2 Living Room Wall Green.jpg"
            },
            {
              "color": "#d3c5ff",
              "image": "/images/H2 Living Room Wall Purple.jpg"
            },
            {
              "color": "#93ece8",
              "image": "/images/H2 Living Room Wall SkyBlue.jpg"
            }
          ],
          "key": "wall_colors",
          "label": "Wall Colors",
          "selected_color": "#d3c5ff"
        },
        {
          "colors": [
            {
              "color": "#eed725",
              "image": "/images/H2 Living Room Ceiling Yellow.jpg"
            },
            {
              "color": "#ffaead",
              "image": "/images/H2 Living Room Ceiling Pink.jpg"
            },
            {
              "color": "#ffaf5d",
              "image": "/images/H2 Living Room Ceiling Orange.jpg"
            }
          ],
          "key": "ceiling_colors",
          "label": "Ceiling Colors",
          "selected_color": "#ffaead"
        }
      ],
      "image_path": "/images/LivingRoom.jpg"
    }
  ],
  "room_name": "Living Room"
}

Payload:
{house_id: "house-001", session_id: "c6222e6a-12d3-4643-96a4-d9df5da5646c",â€¦}
    house_id: "house-001"
    preferences: {cabinet_colors: "#ef90d0"}
    cabinet_colors: "ef90d0"
      selected_rooms: ["Kitchen"]: 
       0 :"Kitchen"
    session_id: "c6222e6a-12d3-4643-96a4-d9df5da5646c"

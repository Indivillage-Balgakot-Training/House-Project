GALLERY PAGE

'use client'; //its client side component

import { useState, useEffect } from 'react'; //Import hooks for state
import Image from 'next/image'; // Import Image component
import Link from 'next/link'; // Import Link component for client-side navigation
import { useRouter } from 'next/navigation'; // Ensure correct import of useRouter
import Sidebar from '../gallery/Sidebar'; // Correct import of Sidebar

// This Defines TypeScript interface for House object to structure data
interface House {
  house_id: string;
  house_name: string;
  house_image: string;
  description?: string;
  locked: boolean | null; // Track if house is locked by another user
}

const GalleryPage = () => {
 // State hooks to manage data
  const [houses, setHouses] = useState<House[]>([]); // Store list of houses
  const [error, setError] = useState<string | null>(null); // Store error messages
  const [loading, setLoading] = useState<boolean>(true);
  const [selectedHouse, setSelectedHouse] = useState<House | null>(null); // Store the Selected house state
  const [lockedHouses, setLockedHouses] = useState<{ [key: string]: boolean }>({});  // Track locked houses
  const [isSidebarOpen, setIsSidebarOpen] = useState<boolean>(false); // Manage the sidebar's open/close state
  const router = useRouter(); // Directly call useRouter here

  // Fetch houses from the backend when the component mounts
  useEffect(() => {
    const fetchHouses = async () => {
      try {
        const response = await fetch('http://127.0.0.1:5000/houses');  // Fetch houses data from backend API
        if (!response.ok) {
          throw new Error('Network response was not ok'); // Handle network errors
        }
        const data: House[] = await response.json(); // Parse the JSON response into House objects
        setHouses(data);  // Set the fetched houses to state
        if (data.length > 0) {
          setSelectedHouse(data[0]); // Set the first house as selected
        }
      } catch (error: unknown) {
        if (error instanceof Error) {
          setError('Error fetching houses: ' + error.message); // Handle error and update state
        }
      } finally {
        setLoading(false); // Stop loading state once the fetch is complete
      }
    };

    fetchHouses();  // Call the fetchHouses function to get data
  }, []);


 // Function to handle image click event and lock house selection
  const handleImageClick = async () => {
    if (selectedHouse) {
      if (lockedHouses[selectedHouse.house_id]) {
        setError('This house is currently locked by another user.'); // If house is locked, show error message
        return;
      }
      try {
        setLoading(true); // it used to Set loading state to true while processing the request
     // Make a POST request to select the house
        const response = await fetch('http://127.0.0.1:5000/select-house', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            house_id: selectedHouse.house_id, // Send the selected house's ID in the request body
          }),
        });

        const data = await response.json(); // Parse the response as JSON
        if (!response.ok) {
          throw new Error(data.error || 'Failed to select house'); // Throw error if the selection fails
        }
        }

        const { session_id, house_id } = data; // Destructure session ID and house ID from response data
        setLockedHouses(prev => ({ ...prev, [house_id]: true })); // Lock the house to prevent re-selection

       // Navigate to the layout page with query parameters for house and session IDs
        router.push(`/layout?house_id=${house_id}&house_name=${selectedHouse.house_name}&session_id=${session_id}`);
      } catch (error) {
        setError('Failed to select house'); // Handle errors during house selection
      } finally {
        setLoading(false); // Stop loading state once the operation is complete
      }
    }
  };

  // Handle house selection from Sidebar
  const handleHouseSelect = (houseId: string) => {
// Find the selected house from the list of houses
    const selected = houses.find(house => house.house_id === houseId);
    setSelectedHouse(selected || null); // Set the selected house based on the ID
  };

 // Toggle the visibility of the sidebar
  const toggleSidebar = () => {
    setIsSidebarOpen((prev) => !prev); // Invert the current state of sidebar visibility
  };

  // If the data is still loading, show loading spinner
  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="spinner"></div> {/* Custom loading spinner */}
        <p>Loading houses...</p>
      </div>
    );
  }

 // If no houses are available, show a message
  if (houses.length === 0) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <p>No houses available at the moment.</p>  {/* Display when no houses are fetched */}
      </div>
      </div>
    );
  }

  return (
    <div className="flex min-h-screen bg-gray-100">
    // Sidebar component
      <Sidebar
        onHouseSelect={handleHouseSelect} // House selection handler
        isOpen={isSidebarOpen}  // Sidebar visibility state
        toggleSidebar={toggleSidebar} // Sidebar toggle function
        onRoomSelect={function (roomName: string): void {
          throw new Error('Function not implemented.'); // Placeholder for room select function
        } } selectedHouseId={null} // Pass selected house ID 
           rooms={[]} // Pass an empty array for rooms     />

      <div className="w-3/4 flex flex-col items-center justify-center p-8">
        {selectedHouse ? (
          <>
             {/* Display selected house details */}
            <h1 className="text-4xl font-bold mb-4">{selectedHouse.house_name}</h1>
            <Image
              src={selectedHouse.house_image} // Image source for the selected house
              alt={selectedHouse.house_name}  // Alt text for the image
              width={600} // Image width
              height={400} // Image height
              style={{ objectFit: 'cover' }}  // Maintain aspect ratio and cover the space
              className="rounded-lg shadow-lg cursor-pointer" // Styling for image
              onClick={handleImageClick} // Call handleImageClick when the image is clicked
            />
            <p className="mt-4 text-center">{selectedHouse.description || "No description available."}</p>
	     {/* Display description if available, otherwise show a default message */}
            <Link href="/" className="mt-6 px-4 py-2 bg-yellow-500 text-black rounded-lg shadow-lg hover:bg-yellow-400 transition">
              Back to Home
            </Link>
          </>
        ) : (
          <p>No house selected.</p>// Show message when no house is selected
        )}
      </div>
    </div>
  );
};

export default GalleryPage;




